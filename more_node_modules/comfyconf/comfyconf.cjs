/* eslint-disable no-unused-vars */
const { readFileSync } = require('node:fs');
const { env } = require('node:process');
const { hostname } = require('node:os');
const pathOps = require('path');
const { mergeDeepRight } = require('ramda');
const JSON5 = require('json5');

const PATH_COMPONENT_REX = /(?<!_)_(?!_)/;


function dedup(arr) {
  const dedupped = [];
  const seen = new Set();
  arr.forEach(el => {
    if (!seen.has(el)) dedupped.push(el);
    seen.add(el);
  });
  return dedupped;
}

class ComfyConf {
  #conf;

  constructor(envPrefix = 'COMFYCONF') {
    this.#conf = this.#makeConf(envPrefix);
  }

  get(path) {
    try {
      return structuredClone(this.#getByPath(this.#conf, path));
    } catch (err) {
      if (err instanceof TypeError) {
        return undefined;
      } else {
        throw err;
      }
    }
  }

  has(path) {
    try {
      this.#getByPath(this.#conf, path);
      return true;
    } catch (err) {
      if (err instanceof TypeError) {
        return false;
      } else {
        throw err;
      }
    }
  }

  dump() {
    return structuredClone(this.#conf);
  }

  #getByPath(obj, path) {
    const pathComponents = path.split('.');
    return pathComponents.reduce((acc, pathComp) => acc[pathComp], obj);
  }

  #setByPath(obj, path, val) {
    const pathComponents = path.split(PATH_COMPONENT_REX).map((el) => el.replace('__', '_'));
    const deepestBranch = pathComponents.slice(0, -1);
    const lastProperty = pathComponents.slice(-1);
    const lastbranch = deepestBranch.reduce((acc, pathComp) => acc[pathComp], obj);
    lastbranch[lastProperty] = val;
  }

  #loadFromFiles(prefix) {
    const confFileNames = env[`${prefix}_FILES`];
    return (confFileNames ? confFileNames.split(/: ?/) : [])
      .map((fname) => readFileSync(fname))
      .map(JSON5.parse)
      .reduce(mergeDeepRight, {});
  }

  #loadNodeConfig() {
    // For backwards compatibility with node-config.
    // See https://github.com/node-config/node-config/wiki/Configuration-Files/9964574a016f5b28c89b77875e26703bc3c0e2bf
    const configDir = env.NODE_CONFIG_DIR || 'config';
    const deployment = env.NODE_CONFIG_ENV || env.NODE_ENV || null;
    const fullHostname = env.HOST || env.HOSTNAME || hostname();
    const [shortHostname, ..._] = fullHostname.split('.');
    const appInstance = env.NODE_APP_INSTANCE;

    const dashurate = (thing, ...postfixes) => {
      if (!thing) return null;
      const usablePostfixes = [];
      for (let i = 0; i < postfixes.length; i += 1) {
        const postfix = postfixes[i];
        if (postfix) {
          usablePostfixes.push(postfix);
        } else {
          break;
        }
      }
      if (!usablePostfixes.length) return thing;
      return `thing-${usablePostfixes.join('-')}`;
    };

    const maybeFileContents = (fPath) => {
      try {
        return readFileSync(fPath);
      } catch (err) {
        if (err.code === 'ENOENT') {
          return null;
        } else {
          throw err;
        }
      }
    };

    const fileContents = dedup([
      null,
      'default',
      dashurate('default', appInstance),
      deployment,
      dashurate(deployment, appInstance),
      shortHostname,
      dashurate(shortHostname, appInstance),
      dashurate(shortHostname, deployment, appInstance),
      fullHostname,
      dashurate(fullHostname, appInstance),
      dashurate(fullHostname, deployment, appInstance),
      'local',
      dashurate('local', appInstance),
      dashurate('local', deployment, appInstance),
    ])
      .filter(el => Boolean(el))
      .flatMap(el => {
        const fname = `${pathOps.join(configDir, el)}`;
        return [`${fname}.json`, `${fname}.json5`];
      })
      .map(maybeFileContents)
      .filter(el => Boolean(el))
      .map(JSON5.parse);

    const configs = fileContents;
    if (env.NODE_CONFIG) configs.push(JSON.parse(env.NODE_CONFIG));
    return configs.reduce(mergeDeepRight, {});
  }

  #loadAssignmentsFromEnv(prefix) {
    const envKeyRex = new RegExp(`^${prefix}(\\d+)?__(.+)$`);
    return Object.entries(env)
      .map(([k, v], _ix) => [envKeyRex.exec(k), v])
      .filter(([krexed, _v]) => krexed !== null)
      .sort(
        ([[_parsedA, applicationOrderA, _pathA], _valA], [[_parsedB, applicationOrderB, _pathB], _valB]) => {
          const [a, b] = [applicationOrderA, applicationOrderB];
          return a < b ? -1 : (a > b ? 1 : 0);
        })
      .map(([[_parsed, _applicationOrder, path], v]) => [path, JSON5.parse(v)]);
  }

  #makeConf(prefix) {
    const nodeConfigConf = this.#loadNodeConfig();
    const conf = mergeDeepRight(nodeConfigConf, this.#loadFromFiles(prefix));
    const confByEnvAssignments = this.#loadAssignmentsFromEnv(prefix);
    confByEnvAssignments.forEach(([trail, value]) => this.#setByPath(conf, trail, value));
    return conf;
  }

}

module.exports = ComfyConf;
